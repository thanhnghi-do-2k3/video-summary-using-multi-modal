[
  "Good, do Tailwind next",
  "Just Copy source code make some adjustments and it's no longer a dependency?????",
  "6:00: cue the usual Vercel ad",
  "Hi Theo, As a preface for my comment. I'd like to mention that I don't particularly agree with a lot of your viewpoints (especially around backend) but I do respect your insights as a developer. My experience is coming from the background of a primarily backend developer and entrepreneur that believes in low to no dependencies, and emphasizing unique user interfaces that correspond to the businesses unique branding. \n\nYou're take on user interfaces is accurate in the sense that it'd better to have a UI within the application itself instead of a library (actually reminds me of a internal cli tool I made to embed my atomic design into any application directly so I could modify it as necessary in a way that's inline with that unique application.) \n\nBasically the current issue with component libraries is when you want to customize the look, it becomes very complex to do and you need to modify the code within node_modules which isn't optimal in any way.\n\nWhat I don't agree with is your take on shade. Personally I don't like it and have no interest in using it. While this does partially come from my unwillingness to use anything vercel (which is basically just a company that took over the primary usage of the react framework and added a Bunch of things to it to make developers lives \"easier\" and I'm sure they do but in reality most of what they make is just a giant dependency tying you to this company and that's exactly what they want $$$) \n\nShade provides these pieces of functionality that you mentioned are a pain to make. And I can tell you they are. But the issue is that shouldn't matter. As developers we should have knowledge of the entire E2E codebase. Meaning we can build the ui, the frontend, the backend, the infra, the database, etc. I don't believe in segmentation of responsibilities because then you're in trouble when that knowledgable person leaves. Instead as developers we should be able to build the entire stack end to end. I'm not saying you need to build your own http library but most of the code should be your own. \n\nWhere this intersects in UI is the (just use this libraries functionality) aspect. UI is complex and by just using these components without internal knowledge of how they work you'll inevitably come to the point of (damn I need to read all this code I didn't write). Instead I propose a \"creating your own shite approach\". Meaning if I'm working for company X, company X has a unique way that they want to be perceived by the world. Instead of trying to retrofit these libraries created for other companies use cases (or as a way to add a dependency between you and a company) look to your client you should be creating a unique ui system for company X with matching style guides. The atomic components that are created for company X should be contained within a storybook application that's separate from all other applications for easy reference.\n\nI then attach this to my cli app and have developers just run the cli to embed the atomic design into their application.\n\nSo I don't have to repeatedly create the same functionality over and over I just have an internal (to me) library that contains all the different components that I would use in a typical application. Essentially my own component library. From this I can just pull the code I've already written over, modify the style of it to match them, add it to storybook and done.\n\nThe best part is I understand all the code I produce. Fully. With corresponding documentation all in the storybook app.",
  "Developers will still need readymade components that are tried, tested and look good. If one library does the job well, I am not wasting my time experimenting and window shopping. I ll build a few things like I recently used all my modals in an app on my own using the native dialog.",
  "unfortunate you cant use these with dotnet mvc:(",
  "I don‚Äôt find you give particularly good advice.",
  "Material was shit from the very beginning",
  "Cavilrine",
  "Is it just me or does Tailwind look as if somebody badly re-implemented the whole CSS by making you to put all of the styling directly in each of the elements? It is as if you were forced to use the \"style\" attribute exclusively, but disguised as \"class\". Madness‚Ä¶\n\nDo not get me wrong: I do acknowledge that it may have some allure and uses, but it is still a bit strange and reminds me the story of PHP‚Äîa templating language in which many other templating languages were soon implemented. It is some freakin' rabbit hole making things more and more complicated by attempting to hide their perceived complexity. Damn engine plastic covers.",
  "I've used DaisyUI for the last two years and to me it seems like the perfect comprise",
  "Wow. Everything old is new again. \n\nThis is classic 00‚Äôs UI development. We‚Äôd grab our js src from some public lib and edit it ‚Äúin our own codebase‚Äù modifying it and (hopefully) improving it.\n\nAll the advantages you‚Äôve talked about in the vid are spot-on, but as more ‚Äúpackaged components‚Äù came out people wanted the solidity and stability of well tested and designed stuff that could be updated with a single command.\n\nIf you want to know the real answer to all fed, IMO it‚Äôs one-of\n1. Backbone + Sass + Bonmot + Handlebars + Bootstrap\n2. React/Hooks + Sass + Redux & Sagas + MaterialUI/Tailwind/**",
  "How do you know this is not just another trend in JS?",
  "this sounds stupid",
  "Why is there no Button component?",
  "Tailwind has a build file that you can customize. We technically build a style element into html blocks, containing just the styling for that component. Gets triggered whenever I save an html file in that directory. But its nice that I can just alter that, if I have to.",
  "its very usefull for us making thiings our own. less dependent to the main library. just grab one you need and modified if you want",
  "Bold statement - \"UI libraries are dying\", instead of saying \"when to use UI libraries and when not to\"",
  "I'm not buying this. The reason why libraries of all sorts work the way they work is to not have all that code in our codebase.",
  "vercel ü§Æ"
]