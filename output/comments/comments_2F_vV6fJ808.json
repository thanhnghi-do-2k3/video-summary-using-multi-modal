[
  "good programming is dead now, people in the early days of software were very worried about software optimizations to run as lighltly as possible and as fast as possible. But nowadays, on the premise that computers are fast and have enough resource, we just throw any bloated software at it that run very inefficiently, you need 8gb of ram to open and operate chrome smoothly. So the main reason i hate javascript is that it is not good when it comes to building performance related software and it is a memory hog.",
  "I am astonished that this is still a debate !",
  "You're not supposed to use frameworks for your school assignment projects like calculators. You use them for scalability and reliability. \n \nRemember there are 3 users of your code, You, your customers and the person who will replace you. Now try extending the functionality of your calc by converting it into a full fledged graphical calculator that will be supported for years to come. You will end up creating or using some form of framework.",
  "all apps are simple like a calculator. frameworks, at least the current ones in the market increase complexity. for example, here's a question I asked some time ago on react. look at the answer and the amounts of likes on that answer. yet I'm not buying it. it's terribly complicated.\nhttps://stackoverflow.com/questions/49058890/how-to-get-a-react-components-size-height-width-before-render/",
  "\"You\" and \"your customers\" are one and the same.  If the app works, it will work for both of those parties.  If it doesn't work, it won't work for either of those parties.  And no programmer in his or her right mind would intentionally use a framework to help out the guy replacing him/her.  You write code, and do a great job enough job that the employer doesn't want to get rid of you, and don't consider for a second whether the person replacing you will be able to pick up where you left off. UNLESS you're moving on to something better :)",
  "For a simple calculator sure but what about a large application? Surely a framework would be worth the while, and to be honest downloading a Vue JS calculator app is hardly going to weigh any more than 10-20kb",
  "vue is essentially the mvvm pattern you'll find this pattern in wpf/c#, knockout.js, vue.js. while it works ok for simple things the more complex the ui gets the harder it is to debug and maintain. especially when you have a bunch of complicated conditionals and nested loops in the markup. I prefer loops/conditionals in javascript not html. \nand yes, I'd still prefer a dumb/simple js solution for large applications. it'd be just like the calculator but more screens. vue introduces a lot of complicated syntax. the more syntax the harder things get. but I agree that it's preferable to other frameworks since it doesn't weigh as much. and binding can come in handy sometimes.",
  "Couldn't agree more!!! We are building and open source framework that focuses on pure javascript and design patterns only.\nThe goal is to get rid of as many 3rd Party Libs over time.",
  "jquery’s better than react tho haha",
  "I wouldn't recommend jquery anymore either. get rid of it all.",
  "jquery is overrated",
  "Wait, your calculator takes less than 1 data cluster of storage. That's pretty funny.",
  "Unfortunately, people from HR don't care about that. Big companies prefer to use frameworks because they can more easily replace any employee - even if those frameworks are adding more load on a project. I as well prefer a less dependant approach with my own object-oriented solution for boosting productivity.",
  "it depends on the company. if you're good at what you do without the use of frameworks they will do everything they can NOT to replace you. because efficiency and speed of delivery is exactly what a company wants. a lot of times the use of a framework leads to versioning issues and deprecation issues down the road. I know a team that uses extJS and they're a bit stuck with it now. I know another team that used an old version of angular now they need to replace it / rewrite a ton of code to get it compatible with the newer versions. same in react. it's just a never ending time sink with these things.",
  " @ShaiUI  I upvoted your video.  What OP was saying is that one of the primary reasons companies use frameworks is so that they can offload responsibility of getting rid of employees by saying \"we don't use that framework anymore\".  Another perspective might be \"we have X number of employees that use Y framework here, and you're the slowest one so we're letting you go\".",
  "Let's write applications in assembler instead of C ++, C #, Java.\nAnd don't use operating systems at all ...\nxD))))",
  "I'm saying to use a scripting language instead of a compiled language for user interfaces. and no point in using heavy frameworks for such a small thing as UI.",
  "Ciao! could you make a video about data binding in Vanilla?",
  "I'm not a big fan of data binding (not that I didn't try, I did it for over 10 years using MVVM). but I find it makes debugging a lot harder. for example, you'll find libraries like vue.js -- they have a bunch of conditionals and loops in their view code. but I find that it makes more problems than it solves. For myself, I'd rather have the conditionals/loops in code. So I just do things old school: in code I decide what I want to show and then I manipulate the DOM directly. if I had a situation where I had many many views and they all look at the same object (aka model), then maybe in that scenerio I'd data bind. and if I did do that I'd just use a Proxy object that would alert me whenever an object changes and in turn I would modify my view sort of like this: https://stackoverflow.com/questions/41299642/how-to-use-javascript-proxy-for-nested-objects",
  "Why is comparing the number of files or directory files a relevant thing? When bundled, the code won't have 99% of that.\n\nAlso, just one file is not simpler when you get bigger. It becomes impossible to maintain.\nAs for the compiler taking time, its actually faster than not having one. I havent worked on a machine where compilation wasn't near instant, and since it happens and auto reloads the browser on every file save, I can save a file and see the results without even moving my mouse, clicking and reloading the page. Not having this would be a major slowdown for me.\n\nAlso, how do you separate the ui thread from complex calculations like on a scientific calculator? Workers and service workers must be in a separate file. Not doing so would hang the ui when you click a button..."
]