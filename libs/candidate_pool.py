import yt_dlp
import time
from concurrent.futures import ThreadPoolExecutor

class CandidateVideoPoolGenerator:
    def __init__(self, max_results_per_term=5):
        self.ydl_opts = {
            'quiet': True,
            'extract_flat': True,
            'max_downloads': max_results_per_term,
            'getcomments': True,  # B·∫≠t t√≠nh nƒÉng l·∫•y b√¨nh lu·∫≠n
            'extract_comments': True,  # Tr√≠ch xu·∫•t b√¨nh lu·∫≠n
            'comments_max': 10,  # Gi·ªõi h·∫°n t·ªëi ƒëa 100 b√¨nh lu·∫≠n
            'sleep_interval_requests': 1  # Gi·∫£m √°p l·ª±c request
        }
        self.executor = ThreadPoolExecutor(max_workers=4)  # X·ª≠ l√Ω song song

    def _get_comments(self, url):
        """L·∫•y b√¨nh lu·∫≠n v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u"""
        try:
            with yt_dlp.YoutubeDL({
                'quiet': True,
                'extract_comments': True,
                'getcomments': True,
                'comments_max': 10,
                'sleep_interval_requests': 2,
                'ignoreerrors': True
            }) as ydl:
                info = ydl.extract_info(url, download=False)
                return [comment['text'] for comment in info.get('comments', [])[:100]]
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y b√¨nh lu·∫≠n {url}: {str(e)}")
            return []

    def _extract_video_info(self, entry):
        """Tr√≠ch xu·∫•t th√¥ng tin video + b√¨nh lu·∫≠n"""
        base_info = {
            'title': entry.get('title', 'No Title'),
            'description': entry.get('description', ''),
            'url': entry.get('url', ''),
            'duration': entry.get('duration', 0),
            'view_count': entry.get('view_count', 0),
            'comments': []  # Kh·ªüi t·∫°o danh s√°ch b√¨nh lu·∫≠n
        }
        
        # L·∫•y b√¨nh lu·∫≠n b·∫•t ƒë·ªìng b·ªô
        future = self.executor.submit(self._get_comments, entry['url'])
        base_info['comments'] = future.result(timeout=30)  # Timeout 30s
        
        return base_info

    def generate_pool(self, search_terms):
        video_pool = []
        seen_urls = set()
        
        if not search_terms:
            print("‚ö†Ô∏è Kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm")
            return []

        with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:
            for idx, term in enumerate(search_terms, 1):
                try:
                    print(f"\nüìå T·ª´ kh√≥a {idx}/{len(search_terms)}: '{term}'")
                    result = ydl.extract_info(
                        f"ytsearch{self.ydl_opts['max_downloads']}:{term}",
                        download=False
                    )

                    for entry in result.get('entries', []):
                        if entry['url'] in seen_urls:
                            continue
                            
                        try:
                            video_info = self._extract_video_info(entry)
                            video_pool.append(video_info)
                            seen_urls.add(entry['url'])
                            print(f"‚úÖ ƒê√£ th√™m: {video_info['title'][:30]}... ({len(video_info['comments'])} b√¨nh lu·∫≠n)")
                        except Exception as e:
                            print(f"‚ùå L·ªói x·ª≠ l√Ω entry: {str(e)}")

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói t√¨m ki·∫øm '{term}': {str(e)}")
                    continue

        self.executor.shutdown(wait=True)
        print(f"\nüéâ T·ªïng s·ªë video ·ª©ng vi√™n: {len(video_pool)}")
        return video_pool